{"version":3,"sources":["InfoBox.js","LineGraph.js","util.js","Map.js","Table.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","isBlack","isGreenYellow","total","active","props","Card","onClick","className","CardContent","Typography","color","numeral","format","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","sortData","sort","b","prettyPrintStat","stat","showDataOnMap","map","country","Marker","position","countryInfo","lat","long","Popup","style","backgroundImage","flag","recovered","deaths","Map","countries","center","zoom","MapContainer","TileLayer","url","attribution","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","respons","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3bd4767.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({\n\ttitle,\n\tcases,\n\tisRed,\n\tisBlack,\n\tisGreenYellow,\n\ttotal,\n\tactive,\n\t...props\n}) {\n\treturn (\n\t\t<Card\n\t\t\tonClick={props.onClick}\n\t\t\tclassName={`infoBox ${active && \"infoBox--selected\"} ${\n\t\t\t\tisRed && \"infoBox--isRed\"\n\t\t\t} ${isBlack && \"infoBox--isBlack\"}`}>\n\t\t\t<CardContent>\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">\n\t\t\t\t\t<strong>{title}</strong>\n\t\t\t\t</Typography>\n\t\t\t\t<h2\n\t\t\t\t\tclassName={`infoBox__cases ${\n\t\t\t\t\t\tisGreenYellow && \"infoBox__cases--greenyellow\"\n\t\t\t\t\t} ${isBlack && \"infoBox__cases--black\"}`}>\n\t\t\t\t\t{cases}\n\t\t\t\t</h2>\n\t\t\t\t<Typography className=\"infoBOx__total\" color=\"textSecondary\">\n\t\t\t\t\t{numeral(total).format(\"0,0\")} Total\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t</Card>\n\t);\n}\n\nexport default InfoBox;\n","import numeral from \"numeral\";\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst options = {\n\tlegend: {\n\t\tdisplay: false,\n\t},\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 0,\n\t\t},\n\t\tmaintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tmode: \"index\",\n\t\t\tintersect: false,\n\t\t\tcallbacks: {\n\t\t\t\tlabel: function (tooltipItem, data) {\n\t\t\t\t\treturn numeral(tooltipItem.value).format(\"+0,0\");\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tscales: {\n\t\txAxes: [\n\t\t\t{\n\t\t\t\ttype: \"time\",\n\t\t\t\ttime: {\n\t\t\t\t\tformat: \"MM:DD:YY\",\n\t\t\t\t\ttooltipFormat: \"ll\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tyAxes: [\n\t\t\t{\n\t\t\t\tgridLines: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\tticks: {\n\t\t\t\t\tcallback: function (value, index, values) {\n\t\t\t\t\t\treturn numeral(value).format(\"0a\");\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n\nconst buildChartData = (data, casesType) => {\n\tlet chartData = [];\n\tlet lastDataPoint;\n\tfor (let date in data.cases) {\n\t\tif (lastDataPoint) {\n\t\t\tconst newDataPoint = {\n\t\t\t\tx: date,\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\n\t\t\t};\n\t\t\tchartData.push(newDataPoint);\n\t\t}\n\t\tlastDataPoint = data[casesType][date];\n\t}\n\treturn chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n\tconst [data, setData] = useState({});\n\t// https://disease.sh/v3/covid-19/historical/all?lastdays=all\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst chartData = buildChartData(data, casesType);\n\t\t\t\t\tsetData(chartData);\n\t\t\t\t});\n\t\t};\n\t\tfetchData();\n\t}, [casesType]);\n\n\treturn (\n\t\t<div className={props.className}>\n\t\t\t{data?.length > 0 && (\n\t\t\t\t<Line\n\t\t\t\t\toptions={options}\n\t\t\t\t\tdata={{\n\t\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbackgroundColor: \"rgba(204,16,52,0.5)\",\n\t\t\t\t\t\t\t\tborderColor: \"#cc1034\",\n\t\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Marker, Popup } from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\nimport * as L from \"leaflet\";\nimport \"leaflet-defaulticon-compatibility\";\n\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n\n// import AwesomeMarkers from 'leaflet.awesome-markers'\n\n// const casesMarker = L.AwesomeMarkers({\n// \ticon: \"virus\",\n// \tmarkerColor: \"#CC1034\",\n// });\n\nconst casesTypeColors = {\n\tcases: {\n\t\thex: \"#CC1034\",\n\t\trgb: \"rgb(204, 16, 52)\",\n\t\tmultiplier: 400,\n\t},\n\trecovered: {\n\t\thex: \"#7dd71d\",\n\t\trgb: \"rgb(125, 215, 29)\",\n\t\tmultiplier: 800,\n\t},\n\tdeaths: {\n\t\thex: \"#aaaaa\",\n\t\trgb: \"rgb(0, 0, 0)\",\n\t\tmultiplier: 2000,\n\t},\n};\n\nexport const sortData = (data) => {\n\tconst sortedData = [...data];\n\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n\n\t// sortedData.sort((a, b) => {\n\t// \tif (a.cases > b.case) {\n\t// \t\treturn -1;\n\t// \t} else {\n\t// \t\treturn 1;\n\t// \t}\n\t// });\n\t// return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n\tstat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\";\n\n// export const showDataOnMap = (data, casesType = \"cases\") =>\n// \tdata.map((country) => (\n// \t\t<Circle\n// \t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\n// \t\t\tcolor={casesTypeColors[casesType].hex}\n// \t\t\tfillColor={casesTypeColors[casesType].hex}\n// \t\t\tfillOpacity={0.4}\n// \t\t\tradius={\n// \t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n// \t\t\t}>\n// \t\t\t<Popup>\n// \t\t\t\t<div className=\"info__container\">\n// \t\t\t\t\t<div\n// \t\t\t\t\t\tclassName=\"info__flag\"\n// \t\t\t\t\t\tstyle={{\n// \t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\n// \t\t\t\t\t\t}}\n// \t\t\t\t\t/>\n// \t\t\t\t\t<div className=\"info__countryName\">{country.country}</div>\n// \t\t\t\t\t<div className=\"info__confirmed\">\n// \t\t\t\t\t\tCase: {numeral(country.cases).format(\"0,0\")}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className=\"info__recovered\">\n// \t\t\t\t\t\tRecovered: {numeral(country.recovered).format(\"0,0\")}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className=\"info__deaths\">\n// \t\t\t\t\t\tDeaths: {numeral(country.deaths).format(\"0,0\")}\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t</Popup>\n// \t\t</Circle>\n// \t));\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n\tdata.map((country) => (\n\t\t<MarkerClusterGroup>\n\t\t\t<Marker position={[country.countryInfo.lat, country.countryInfo.long]}>\n\t\t\t\t<Popup>\n\t\t\t\t\t<div className=\"info__container\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"info__flag\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"info__countryName\">{country.country}</div>\n\t\t\t\t\t\t<div className=\"info__confirmed\">\n\t\t\t\t\t\t\tCase: {numeral(country.cases).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"info__recovered\">\n\t\t\t\t\t\t\tRecovered: {numeral(country.recovered).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"info__deaths\">\n\t\t\t\t\t\t\tDeaths: {numeral(country.deaths).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Popup>\n\t\t\t</Marker>\n\t\t</MarkerClusterGroup>\n\t));\n","import React from \"react\";\nimport {  MapContainer, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n\treturn (\n\t\t<div className=\"map\">\n\t\t\t<MapContainer casesType={casesType} center={center} zoom={zoom} countries={countries}>\n\t\t\t\t<TileLayer\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\t\t\t\t/>\n\t\t\t\t{showDataOnMap(countries, casesType)}\n\t\t\t</MapContainer>\n\t\t</div>\n\t);\n}\n\nexport default Map;\n","import numeral from \"numeral\";\nimport React from \"react\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n\treturn (\n\t\t<div className=\"table\">\n\t\t\t{countries.map(({ country, cases }) => (\n\t\t\t\t<tr className=\"table__rows\" >\n\t\t\t\t\t<td className=\"table__data\">{country}</td>\n\t\t\t\t\t<td className=\"table__data\">\n\t\t\t\t\t\t<strong>{numeral(cases).format(\"0,0\")}</strong>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Table;\n","import {\n\tCard,\n\tCardContent,\n\tFormControl,\n\tMenuItem,\n\tSelect,\n} from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\t// API = https://disease.sh/v3/covid-19/countries\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState(\"Select Country\");\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\tuseEffect(() => {\n\t\t// 在未選取國家時，顯示全球統計資料\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then((respons) => respons.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country, // get country name\n\t\t\t\t\t\tvalue: country.countryInfo.iso2, // get country short name  exsample: TW UK JP USA\n\t\t\t\t\t}));\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t});\n\t\t};\n\t\tgetCountriesData();\n\t}, []);\n\n\tconst onCountryChange = async (e) => {\n\t\t// 顯示選取國家的統計資料\n\t\tconst countryCode = e.target.value;\n\t\tconst url =\n\t\t\tcountryCode === \"Select Country\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\tawait fetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\t// get country short name\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\tsetMapZoom(5);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COVID-19 Tracker</h1>\n\t\t\t\t\t<FormControl className=\"app__dropDown\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\tonChange={onCountryChange}>\n\t\t\t\t\t\t\t<MenuItem value=\"Select Country\">Select Country</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === \"cases\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"cases\")}\n\t\t\t\t\t\ttitle=\"CoronaVirus Cases\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={countryInfo.cases}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisGreenYellow\n\t\t\t\t\t\tactive={casesType === \"recovered\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"recovered\")}\n\t\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={countryInfo.recovered}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisBlack\n\t\t\t\t\t\tactive={casesType === \"deaths\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"deaths\")}\n\t\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={countryInfo.deaths}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Map\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Case by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n\t\t\t\t\t<LineGraph className=\"app__graph\" casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}